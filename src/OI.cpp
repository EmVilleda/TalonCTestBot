// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "SmartDashboard/SmartDashboard.h"
#include "Commands/ArbitraryCommand.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/DriveDistanceCommand.h"
#include "Commands/DrivePid.h"
#include "Commands/ToggleSolenoidCommand.h"
#include "Commands/ReverseSolenoidCommand.h"
#include "Commands/ForwardSolenoidCommand.h"
#include "OI.h"
#include "Commands/DriveCommand.h"
#include "Commands/DrivePid.h"

OI::OI() {
	// Process operator interface input here.
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

	joystick = new Joystick(0);
	toggleSolenoidCommand  = new ToggleSolenoidCommand();
	reverseSolenoidCommand = new ReverseSolenoidCommand();
	forwardSolenoidCommand = new ForwardSolenoidCommand();

	driverStation = DriverStation::GetInstance();
	printf("Joystick 0 has %d axes", driverStation->GetStickAxisCount(0));

	drivePidCommand = new DrivePid(4000);
	
	driveDistance = new DriveDistanceCommand(1000);

	toggleSolenoidButton = new JoystickButton(joystick, 8);		// menu
	reverseSolenoidButton= new JoystickButton(joystick, 6);		// r bumper
	forwardSolenoidButton= new JoystickButton(joystick, 5);		// l bumper

	driveDistanceButton = new JoystickButton(joystick, 1);		//A

	drivePidButton = new JoystickButton(joystick, 2);			//B

	printf("buttons constructed\n");
	toggleSolenoidButton->WhenPressed(toggleSolenoidCommand);
	reverseSolenoidButton->WhenPressed(reverseSolenoidCommand);
	forwardSolenoidButton->WhenPressed(forwardSolenoidCommand);

	driveDistanceButton->WhenPressed(driveDistance);


	drivePidButton->WhenPressed(drivePidCommand);

    // SmartDashboard Buttons

	SmartDashboard::PutData("Autonomous Command", new AutonomousCommand());

	SmartDashboard::PutData("Drive", new DriveCommand());

//	SmartDashboard::PutData("ArbitraryCommand", new ArbitraryCommand());

}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

Joystick* OI::getJoystick() {
	return joystick;
}

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
