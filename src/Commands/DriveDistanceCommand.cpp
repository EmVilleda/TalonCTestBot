/*
 * DriveDistanceCommand.cpp
 *
 *  Created on: Jan 29, 2015
 *      Author: Ligerbots
 */


// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "DriveDistanceCommand.h"

DriveDistanceCommand::DriveDistanceCommand(int dist) {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	Requires(Robot::driveSubsystem);
	// 100 adjusts for overshoot
	distance = dist-100;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// Called just before this Command runs the first time
void DriveDistanceCommand::Initialize() {
	isCommandDone = false;
	prevLeftEnc = Robot::driveSubsystem->GetLeftEncoderPosition();
	prevRightEnc = Robot::driveSubsystem->GetRightEncoderPosition();
	distanceTraveledL = 0.0;
	distanceTraveledR = 0.0;
}

// Called repeatedly when this Command is scheduled to run
void DriveDistanceCommand::Execute() {
	float leftEnc = Robot::driveSubsystem->GetLeftEncoderPosition();
	float rightEnc = Robot::driveSubsystem->GetRightEncoderPosition();

//  we'll be using the distance sensor as a safety to keep  us from running into things.
//	bool isDistSensorOK = RobotMap::distanceSensor->GetVoltage() <= distanceSensorThreshold;
//	if (!isDistSensorOK) isCommandDone=true;

	if ((distance - distanceTraveledL) > 1000 or (distance - distanceTraveledR) > 1000) {
		leftMotorOutput = -0.8;
		rightMotorOutput = -0.8;
		printf("High \n");
	}
		/*
		 * else if (distanceTraveled < 0.8 * distance){
			Robot::driveSubsystem->robotDrive->ArcadeDrive(-0.5, 0.0);
			printf("Medium \n");
		} */
	else {
		leftMotorOutput = -0.4;
		rightMotorOutput = -0.4;
		printf("Slow \n");
	}
	if (distanceTraveledL>distanceTraveledR) {
		rightMotorOutput -= 0.1;
	}
	else if (distanceTraveledL<distanceTraveledR) {
		leftMotorOutput -= 0.1;
	}
	if (distanceTraveledL >= distance) {
		leftMotorOutput = 0;
	}
	if (distanceTraveledR >= distance) {
		rightMotorOutput = 0;
	}

	Robot::driveSubsystem->robotDrive->SetLeftRightMotorOutputs(leftMotorOutput, rightMotorOutput);

	distanceTraveledL += (leftEnc - prevLeftEnc);
	distanceTraveledR -= (rightEnc - prevRightEnc);

	SmartDashboard::PutNumber("Drive Distance L", distanceTraveledL);
	SmartDashboard::PutNumber("Drive Distance R", distanceTraveledR);
	SmartDashboard::PutNumber("Left Motor Output", leftMotorOutput);
	SmartDashboard::PutNumber("Right Motor Output", rightMotorOutput);

	prevLeftEnc = leftEnc;
	prevRightEnc = rightEnc;

	// If isCommandDone was already true, leave it that way (might have set it above)
	// Otherwise, we if we've driven far enough and end the command.
	if (distanceTraveledL>distance or distanceTraveledR>distance) isCommandDone = true;

}

// Make this return true when this Command no longer needs to run execute()
bool DriveDistanceCommand::IsFinished() {
	return isCommandDone; //By using a variable we can bail out of the distance sensor tells us we're about to hit a wall
}

// Called once after isFinished returns true
void DriveDistanceCommand::End() {
	Robot::driveSubsystem->robotDrive->ArcadeDrive(0, 0, true);
	((DriveCommand *)Robot::driveCommand)->Start();

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DriveDistanceCommand::Interrupted() {

}
