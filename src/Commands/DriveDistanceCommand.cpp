/*
 * DriveDistanceCommand.cpp
 *
 *  Created on: Jan 29, 2015
 *      Author: Ligerbots
 */


// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "DriveDistanceCommand.h"

#include "../Constants.h"


DriveDistanceCommand::DriveDistanceCommand(int dist) {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	Requires(Robot::driveSubsystem);
	distance = dist;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// Called just before this Command runs the first time
void DriveDistanceCommand::Initialize() {
	isCommandDone = false;
	prevLeftEnc = Robot::driveSubsystem->GetLeftEncoderPosition();
	prevRightEnc = Robot::driveSubsystem->GetRightEncoderPosition();
	distanceTraveled=0.0;
}

// Called repeatedly when this Command is scheduled to run
void DriveDistanceCommand::Execute() {
	float leftEnc = Robot::driveSubsystem->GetLeftEncoderPosition();
	float rightEnc = Robot::driveSubsystem->GetRightEncoderPosition();
//	bool isDistSensorOK = RobotMap::distanceSensor->GetVoltage() <= distanceSensorThreshold;
//	if (!isDistSensorOK) isCommandDone=true;
	if ((distance - distanceTraveled) > 512) {
		Robot::driveSubsystem->robotDrive->ArcadeDrive(-0.8, 0.0);
		printf("High \n");
	}
		/*else if (distanceTraveled < 0.8 * distance){
			Robot::driveSubsystem->robotDrive->ArcadeDrive(-0.5, 0.0);
			printf("Medium \n");
		} */
	else {
		Robot::driveSubsystem->robotDrive->ArcadeDrive(-0.4, 0.0);
		printf("Slow \n");
	}

	distanceTraveled += (leftEnc - prevLeftEnc);
	SmartDashboard::PutNumber("Drive Distance", distanceTraveled);

	prevLeftEnc = leftEnc;
	prevRightEnc = rightEnc;

	if(distanceTraveled>distance)isCommandDone=true;

}

// Make this return true when this Command no longer needs to run execute()
bool DriveDistanceCommand::IsFinished() {
	return isCommandDone; //By using a variable we can bail out of the distance sensor tells us we're about to hit a wall
}

// Called once after isFinished returns true
void DriveDistanceCommand::End() {
	Robot::driveSubsystem->robotDrive->ArcadeDrive(0, 0, true);
	((DriveCommand *)Robot::driveCommand)->Start();

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DriveDistanceCommand::Interrupted() {

}
