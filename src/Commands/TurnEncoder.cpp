// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "TurnEncoder.h"

TurnEncoder::TurnEncoder(int _degrees, bool reverseDirection) {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveSubsystem);
	targetEncTicks = ENCODERFULLREVOLUTION*360/_degrees;
	isFinished=false;
}
TurnEncoder::TurnEncoder(int _degrees) {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveSubsystem);
	targetEncTicks = ENCODERFULLREVOLUTION*360/_degrees;
	isFinished=false;
}

// Called just before this Command runs the first time
void TurnEncoder::Initialize() {
	SetTimeout(15);  // set 15 second timeout. Good enough?

	double p = 1.0;
	double i = 0.0;
	double d = 0.0;
	double f = 1.0;

	//SO MANY COPYPASTED API CALLS AAAAARGH
    RobotMap::driveSubsystemMotorControllerFrontLeft->SetControlMode(CANSpeedController::kPosition);
    RobotMap::driveSubsystemMotorControllerFrontLeft->SetPID(p,i,d);
    RobotMap::driveSubsystemMotorControllerFrontLeft->SetF(f);
    RobotMap::driveSubsystemMotorControllerFrontLeft->ClearIaccum();
    RobotMap::driveSubsystemMotorControllerFrontLeft->SetPosition(0.0);
    RobotMap::driveSubsystemMotorControllerFrontLeft->SetFeedbackDevice(CANTalon::QuadEncoder);
    //RobotMap::driveSubsystemMotorControllerFrontLeft->

    RobotMap::driveSubsystemMotorControllerFrontRight->SetControlMode(CANSpeedController::kPosition);
    RobotMap::driveSubsystemMotorControllerFrontRight->SetPID(p,i,d);
    RobotMap::driveSubsystemMotorControllerFrontRight->SetF(f);
    RobotMap::driveSubsystemMotorControllerFrontRight->ClearIaccum();
    RobotMap::driveSubsystemMotorControllerFrontRight->SetPosition(0.0);
    RobotMap::driveSubsystemMotorControllerFrontRight->SetFeedbackDevice(CANTalon::QuadEncoder);

	leftStartPos=RobotMap::driveSubsystemMotorControllerFrontLeft->GetEncPosition();
	rightStartPos=RobotMap::driveSubsystemMotorControllerFrontRight->GetEncPosition();
}

// Called repeatedly when this Command is scheduled to run
void TurnEncoder::Execute(){
	//Robot::driveSubsystem->robotDrive->ArcadeDrive(0,1.0);

    //RobotMap::driveSubsystemMotorControllerFrontRight->
	printf("Executing TurnEncoder!");

	RobotMap::driveSubsystemMotorControllerFrontLeft->Set(targetEncTicks);
	RobotMap::driveSubsystemMotorControllerFrontRight->Set(-targetEncTicks);

	double currPos = RobotMap::driveSubsystemMotorControllerFrontLeft->GetPosition();
	double toGo = targetEncTicks-currPos;
	if(toGo < 5) isFinished=true;

	printf("Executing TurnEncoder!");
}

// Make this return true when this Command no longer needs to run execute()
bool TurnEncoder::IsFinished() {
	return isFinished;
}

// Called once after isFinished returns true
void TurnEncoder::End() {
	//should we set the talons back?
	Robot::driveSubsystem->robotDrive->ArcadeDrive(0, 0, true);
	((DriveCommand *)Robot::driveCommand)->Start();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void TurnEncoder::Interrupted() {
	End();
}
